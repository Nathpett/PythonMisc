from pygame import Vector2
import numpy.random as np_random
from random import random, randint, shuffle
from collections import defaultdict


# https://stackoverflow.com/questions/19472530/representing-graphs-data-structure-in-python

class world_graph():
    def __init__(self, building_weights):
        self.graph = Graph()

    def new_world_graph(self, building_dict, street_ct):
        # building dict -- building_name: building_weight
        # street_ct = sum(building_dict.values) // 5 + len(characters) // 12
        block_len = 0.05  # distance between parallel streets
        if street_ct > 2 * (1 / block_len):
            raise ValueError

        # randomly generate a list of lines -- integer, float, tuple -- representing streets
        streets = [(0, 0.5, 0.0, 1.0), (1, 0.5, 0.0, 1.0)]  # (axis, pnt_on_axis, extent1, extent2)

        pts = [[round(i * block_len, 2) for i in range(int(1 / block_len))],
               [round(i * block_len, 2) for i in range(int(1 / block_len))]]
        if 0.5 in pts[0]:
            pts[0].remove(0.5)
            pts[1].remove(0.5)

        shuffle(pts[0])
        shuffle(pts[1])

        # street = (axis, pt_on_axis, extent1, extent2)
        for i in range(street_ct):
            length = 0.5 + block_len * round(random() * (1 / (block_len / 0.5)))
            if len(pts[0]) > 0 and len(pts[1]) > 0:
                axis = randint(0, 1)
            else:
                if len(pts[0]) > 0:
                    axis = 0
                else:
                    axis = 1

            pt = pts[axis].pop()
            extent = round(random() * (1.0 - length) / block_len) * block_len
            streets.append((axis, pt, extent, extent + length))

        # === using that list, generate Graph, where each intersection and street end is a node. ===
        self._graph = Graph()

        streets.sort()

        # From streets, generate a list of intersections (nodes)

        # finally add buildings somehow
        for key, value in building_dict.items():
            pass


class Graph(object):
    """ Graph data structure, undirected by default. """

    def __init__(self, connections=None):
        self._graph = defaultdict(set)
        self._edges = {}
        self._running_id = 0
        if connections:
            self.add_edges(connections)

    def add_edges(self, edges):
        """ Add connections (list of tuple pairs) to graph
            can also be dict of tuple pairs : evaluateable string for constructing an saved Edge"""
        if isinstance(edges, dict):
            for key, value in edges.items():
                self.add(key[0], key[1], value)
        else:
            for node1, node2 in edges:
                self.add(node1, node2)

    def add(self, node1=None, node2=None, edge=None):
        """ Add connection between node1 and node2 """
        if node1 is None:
            node1 = self.new_id()
        if node2 is None:
            node2 = self.new_id()

        self._graph[node1].add(node2)
        self._graph[node2].add(node1)
        if edge:
            self._edges[tuple(sorted([node1, node2]))] = eval(edge)
        else:
            self._edges[tuple(sorted([node1, node2]))] = Edge()

    def remove(self, node):
        """ Remove all references to node """
        for n, cxns in self._graph.items():
            try:
                cxns.remove(node)
                del self._edges[tuple(sorted([node, n]))]
            except KeyError:
                pass
        try:
            del self._graph[node]
        except KeyError:
            pass

    def is_connected(self, node1, node2):
        """ Is node1 directly connected to node2 """
        return node1 in self._graph and node2 in self._graph[node1]

    def find_path(self, node1, node2, path=[]):
        """ Find any path between node1 and node2 (may not be shortest) """

        path = path + [node1]
        if node1 == node2:
            return path
        if node1 not in self._graph:
            return None
        for node in self._graph[node1]:
            if node not in path:
                new_path = self.find_path(node, node2, path)
                if new_path:
                    return new_path
        return None

    def bisect(self, edge, node, length=0.5):
        pass
        # bisects edge with node:  bisect("AB", "C") ===>  EDGES: "AC", "CB"

    def new_id(self):
        self._running_id += 1
        return self._running_id - 1

    def __str__(self):
        return '{}({})'.format(self.__class__.__name__, {key: str(value) for key, value in self._edges.items()})


class Edge(object):
    def __init__(self, dict=None):
        if dict:
            self.__dict__ = dict

    def __str__(self):
        return '{}({})'.format(self.__class__.__name__, self.__dict__)
