from collections import defaultdict
from random import random
# https://stackoverflow.com/questions/19472530/representing-graphs-data-structure-in-python
class Graph(object):
    """ Graph data structure, undirected by default. """

    def __init__(self, connections=None):
        self._graph = defaultdict(set)
        self.edges = {}
        if connections:
            self.add_edges(connections)

    def add_edges(self, edges):
        """ Add connections (list of tuple pairs) to graph
            can also be dict of tuple pairs : evaluateable string for constructing an saved Edge"""
        if isinstance(edges, dict):
            for key, value in edges.items():
                self.add(key[0], key[1], value)
        else:
            for node1, node2 in edges:
                self.add(node1, node2)

    def add(self, node1, node2, edge=None):
        """ Add connection between node1 and node2 """
        self._graph[node1].add(node2)
        self._graph[node2].add(node1)
        if edge:
            if isinstance(edge, Edge):
                self.edges[tuple(sorted([node1, node2]))] = edge
            elif isinstance(edge, str):
                self.edges[tuple(sorted([node1, node2]))] = eval(edge)
            else:
                raise ValueError
        else:
            self.edges[tuple(sorted([node1, node2]))] = Edge()

    def remove(self, node):
        """ Remove all references to node """
        for n, cxns in self._graph.items():
            try:
                cxns.remove(node)
                self.edges.remove(tuple(sorted([node, n])))
            except KeyError:
                pass
        try:
            del self._graph[node]
        except KeyError:
            pass

    def is_connected(self, node1, node2):
        """ Is node1 directly connected to node2 """
        return node1 in self._graph and node2 in self._graph[node1]

    def find_path(self, node1, node2, path=[]):
        """ Find any path between node1 and node2 (may not be shortest) """

        path = path + [node1]
        if node1 == node2:
            return path
        if node1 not in self._graph:
            return None
        for node in self._graph[node1]:
            if node not in path:
                new_path = self.find_path(node, node2, path)
                if new_path:
                    return new_path
        return None

    def __str__(self):
        return '{}({})'.format(self.__class__.__name__, {key: str(value) for key, value in self.edges.items()})


class Edge(object):
    def __init__(self, _dict=None):
        if _dict:
            self.__dict__ = _dict

    def __str__(self):
        return '{}({})'.format(self.__class__.__name__, self.__dict__)

class Street(Edge):
    def __init__(self, arg):
        if isinstance(arg, dict):
            super().__init__(arg)
        else:
            self.length = arg
            self.buildings = []

    def add_building(self, name):
        # add building at random length along self
        building = Building()
        building.name = name
        building.point_on_street = round(random() * self.length, 2)
        self.buildings.append(building)

    def __str__(self):
        return '{}({})'.format(self.__class__.__name__, self.__dict__)

class Building:
    def __init__(self, args=None):
        if isinstance(args, dict):
            self.__dict__ = args

    def register(self, registry, unregistered):
        if "id" not in self.__dict__:
            unregistered.append(self)
        else:
            registry[self.id] = self

    def __str__(self):
        return '{}({})'.format(self.__class__.__name__, self.__dict__)

    def __repr__(self):
        return '{}({})'.format(self.__class__.__name__, self.__dict__)
