import numpy.random as np_random
from random import random, randint, shuffle
from collections import defaultdict


# https://stackoverflow.com/questions/19472530/representing-graphs-data-structure-in-python

class world_graph():
    def __init__(self, graph_string=None):
        if graph_string:
            self._graph = eval(graph_string)
        else:
            self._graph = Graph()

    def new_world_graph(self, building_dict, street_ct):
        self._graph = Graph()
        # building dict -- building_name: building_ct
        block_len = 0.05  # distance between parallel streets
        if street_ct > 2 * (1 / block_len):
            raise ValueError

        # randomly generate a list of lines -- integer, float, tuple -- representing streets
        streets = [(0, 0.5, 0.0, 1.0), (1, 0.5, 0.0, 1.0)]  # (axis, pnt_on_axis, extent1, extent2)

        pts = [[round(i * block_len, 2) for i in range(int(1 / block_len))],
               [round(i * block_len, 2) for i in range(int(1 / block_len))]]
        if 0.5 in pts[0]:
            pts[0].remove(0.5)
            pts[1].remove(0.5)

        shuffle(pts[0])
        shuffle(pts[1])

        # street = (axis, pt_on_axis, extent1, extent2)
        for i in range(street_ct):
            length = round(0.5 + block_len * round(random() * (1 / (block_len / 0.5))), 2)
            if len(pts[0]) > 0 and len(pts[1]) > 0:
                axis = randint(0, 1)
            else:
                if len(pts[0]) > 0:
                    axis = 0
                else:
                    axis = 1

            pt = pts[axis].pop()
            extent1 = round(round(random() * (1.0 - length) / block_len) * block_len, 2)
            streets.append((axis, pt, extent1, round(extent1 + length, 2)))

        # === using that list, generate Graph, where each intersection and street end is a node. ==
        streets.sort()
        v_streets = [street for street in streets if street[0] == 0]
        h_streets = [street for street in streets if street[0] == 1]
        # transform streets into list of Vector2s belonging to an axis.
        new_streets = []  # [(axis, Vec2_a, Vec2_b... vec2_n)]
        for street in v_streets:
            s_axis, s_pt, s_extent1, s_extent2 = street
            vectors = set()

            vectors.add((s_pt, s_extent1))
            for alt_street in h_streets:
                a_axis, a_pt, a_extent1, a_extent2 = alt_street
                if (a_extent1 <= s_pt <= a_extent2) and (s_extent1 <= a_pt <= s_extent2):
                    vectors.add((s_pt, a_pt))
            vectors.add((s_pt, s_extent2))

            new_street = sorted(tuple(vectors))
            new_streets.append(new_street)

        for street in h_streets:
            s_axis, s_pt, s_extent1, s_extent2 = street
            vectors = set()

            vectors.add((s_extent1, s_pt))
            for alt_street in v_streets:
                a_axis, a_pt, a_extent1, a_extent2 = alt_street
                if (a_extent1 <= s_pt <= a_extent2) and (s_extent1 <= a_pt <= s_extent2):
                    vectors.add((a_pt, s_pt))
            vectors.add((s_extent2, s_pt))

            new_street = sorted(tuple(vectors))
            new_streets.append(new_street)

        for street in new_streets:
            for vec1, vec2 in zip(street, street[1:]):
                length = round(abs(vec1[0] - vec2[0]) + abs(vec1[1] - vec2[1]), 2)
                self._graph.add(vec1, vec2, Street(length))

        # finally add buildings to and along streets randomly, weight towards center
        for key, value in building_dict.items():
            for _ in range(value):
                r_vec2 = (np_random.normal() + 0.5, np_random.normal() + 0.5)
                street = self.nearest_street(r_vec2)
                self._graph.edges[street].add_building(key)

    def get_graph(self):
        return self._graph.edges

    def nearest_street(self, vec):
        champ = None
        champ_dist = 100
        for street in self._graph.edges:
            if street[0][0] == street[1][0]:
                same = 0
                n_same = 1
            else:
                same = 1
                n_same = 0
            a_pt = street[0][same]
            extent1 = min(street[0][n_same], street[1][n_same])
            extent2 = max(street[0][n_same], street[1][n_same])

            dist = abs(a_pt - vec[same])
            if not extent1 <= vec[n_same] <= extent2:
                dist *= 10

            if dist < champ_dist:
                champ_dist = dist
                champ = street

        return champ


class Graph(object):
    """ Graph data structure, undirected by default. """

    def __init__(self, connections=None):
        self._graph = defaultdict(set)
        self.edges = {}
        if connections:
            self.add_edges(connections)

    def add_edges(self, edges):
        """ Add connections (list of tuple pairs) to graph
            can also be dict of tuple pairs : evaluateable string for constructing an saved Edge"""
        if isinstance(edges, dict):
            for key, value in edges.items():
                self.add(key[0], key[1], value)
        else:
            for node1, node2 in edges:
                self.add(node1, node2)

    def add(self, node1, node2, edge=None):
        """ Add connection between node1 and node2 """
        self._graph[node1].add(node2)
        self._graph[node2].add(node1)
        if edge:
            if isinstance(edge, Edge):
                self.edges[tuple(sorted([node1, node2]))] = edge
            elif isinstance(edge, str):
                self.edges[tuple(sorted([node1, node2]))] = eval(edge)
            else:
                raise ValueError
        else:
            self.edges[tuple(sorted([node1, node2]))] = Edge()

    def remove(self, node):
        """ Remove all references to node """
        for n, cxns in self._graph.items():
            try:
                cxns.remove(node)
                self.edges.remove(tuple(sorted([node, n])))
            except KeyError:
                pass
        try:
            del self._graph[node]
        except KeyError:
            pass

    def is_connected(self, node1, node2):
        """ Is node1 directly connected to node2 """
        return node1 in self._graph and node2 in self._graph[node1]

    def find_path(self, node1, node2, path=[]):
        """ Find any path between node1 and node2 (may not be shortest) """

        path = path + [node1]
        if node1 == node2:
            return path
        if node1 not in self._graph:
            return None
        for node in self._graph[node1]:
            if node not in path:
                new_path = self.find_path(node, node2, path)
                if new_path:
                    return new_path
        return None

    def __str__(self):
        return '{}({})'.format(self.__class__.__name__, {key: str(value) for key, value in self.edges.items()})


class Edge(object):
    def __init__(self, _dict=None):
        if _dict:
            self.__dict__ = _dict

    def __str__(self):
        return '{}({})'.format(self.__class__.__name__, self.__dict__)


class Street(Edge):
    def __init__(self, arg):
        if isinstance(arg, dict):
            super().__init__(arg)
        else:
            self.length = arg
            self.buildings = []

    def add_building(self, building):
        # add building at random length along self
        address = round(random() * self.length, 2)
        self.buildings.append(Building(building, address))


class Building:
    def __init__(self, building_name, address):
        self.name = building_name
        self.address = address

    def __str__(self):
        return '{}({})'.format(self.__class__.__name__, self.__dict__)
